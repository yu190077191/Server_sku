using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Xml;
using WF.Framework;
using WF.Framework.Helper;

namespace WF.DataAccess
{
    public class BaseDao
    {
        public static readonly string ConnectionString = Constants.ConnectionString;
        public static List<SqlParameter> RenderPagination(int pageIndex, int pageSize)
        {
            var list = new List<SqlParameter>();
            var pageIndexPara = new SqlParameter("@pageIndex", pageIndex);
            var pageSizePara = new SqlParameter("@pageSize", pageSize);
            list.Add(pageIndexPara);
            list.Add(pageSizePara);
            return list;
        }

        /// <summary>
        /// Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="addOperator">Add operator to the param list or not.</param>
        /// <returns>An int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(string commandText, SqlParameter[] sqlParameters, CommandType commandType = CommandType.StoredProcedure, bool addOperator = true)
        {
            int result = -1;
            var paramList = new List<SqlParameter>();

            if (sqlParameters != null && sqlParameters.Length > 0)
            {
                paramList.AddRange(sqlParameters);
            }

            using (var connection = new SqlConnection(ConnectionString))
            {
                result = SqlHelper.ExecuteNonQuery(connection, commandType, commandText, paramList.ToArray());
            }

            return result;
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <returns>An XmlDocument containing the resultset generated by the command</returns>
        public static string ExecuteXmlReader(string commandText, SqlParameter[] sqlParameters)
        {
            return ExecuteXmlReader(commandText, sqlParameters, CommandType.StoredProcedure);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <param name="cmdTimeOut">command timeout seconds</param>
        /// <returns>An XmlDocument containing the resultset generated by the command</returns>
        public static string ExecuteXmlReader(string commandText, SqlParameter[] sqlParameters, int cmdTimeOut)
        {
            return ExecuteXmlReader(commandText, sqlParameters, CommandType.StoredProcedure, cmdTimeOut);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <returns>An XmlDocument containing the resultset generated by the command</returns>
        public static string ExecuteXmlReader(string commandText, SqlParameter[] sqlParameters, CommandType commandType)
        {
            string xmlString = null;

            using (var connection = new SqlConnection(ConnectionString))
            {
                XmlReader reader = SqlHelper.ExecuteXmlReader(connection, commandType, commandText, sqlParameters);
                XmlDocument xmlDocument = XmlHelper.LoadXml(reader);
                xmlString = xmlDocument.OuterXml;
            }

            return xmlString;
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="cmdTimeOut">Command timeout seconds</param>
        /// <returns>An XmlDocument containing the resultset generated by the command</returns>
        public static string ExecuteXmlReader(string commandText, SqlParameter[] sqlParameters, CommandType commandType, int cmdTimeOut)
        {
            string xmlString = null;

            using (var connection = new SqlConnection(ConnectionString))
            {
                XmlReader reader = SqlHelper.ExecuteXmlReader(connection, commandType, commandText, cmdTimeOut, sqlParameters);
                XmlDocument xmlDocument = XmlHelper.LoadXml(reader);
                xmlString = xmlDocument.OuterXml;
            }

            return xmlString;
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <returns>A dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataSet(string commandText, SqlParameter[] sqlParameters)
        {
            return ExecuteDataSet(commandText, sqlParameters, CommandType.StoredProcedure);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <returns>A dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataSet(string commandText, SqlParameter[] sqlParameters, CommandType commandType)
        {
            DataSet dataSet = null;

            using (var connection = new SqlConnection(ConnectionString))
            {
                dataSet = SqlHelper.ExecuteDataSet(connection, commandType, commandText, sqlParameters);
            }

            return dataSet;
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in 
        /// the connection string. 
        /// </summary>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <param name="sqlParameters">An array of SqlParamters used to execute the command</param>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(string commandText, SqlParameter[] sqlParameters, CommandType commandType)
        {
            object result = null;

            using (var connection = new SqlConnection(ConnectionString))
            {
                result = SqlHelper.ExecuteScalar(connection, commandType, commandText, sqlParameters);
            }

            return result;
        }

        public static string GetParameterValue(List<SqlParameter> sqlParameters, string parameterName)
        {
            if (sqlParameters != null && sqlParameters.Count > 0 && !string.IsNullOrEmpty(parameterName))
            {
                var para = sqlParameters.Where(k => k.ParameterName.Replace("@", string.Empty).Equals(parameterName.Replace("@", string.Empty), StringComparison.CurrentCultureIgnoreCase)).FirstOrDefault();
                if (para != null)
                {
                    return para.Value.ToString();
                }
            }

            return string.Empty;
        }

        public static int GetID(List<SqlParameter> sqlParameters)
        {
            string idStr = GetParameterValue(sqlParameters, "Id");
            int id = 0;
            Int32.TryParse(idStr, out id);
            return id;
        }
    }
}